name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  EXPO_CLI_VERSION: latest

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-suite: [unit, integration, performance, security, accessibility]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Expo CLI
      run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}
      
    - name: Run ${{ matrix.test-suite }} tests
      run: npm run test:${{ matrix.test-suite }}
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          coverage/
          test-results/
          
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate coverage report
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Coverage Check
      run: npm run coverage:check
      
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript type checking
      run: npm run type-check
      
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Java (for Android)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Build for E2E testing
      run: npm run test:e2e:build
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload E2E test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: |
          artifacts/
          screenshots/
          
  build-and-validate:
    name: Build and Validate
    runs-on: ubuntu-latest
    needs: [test, lint-and-type-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Expo CLI
      run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}
      
    - name: Validate Expo configuration
      run: expo doctor
      
    - name: Build for production (test)
      run: npm run build:test
      
    - name: Analyze bundle size
      run: npm run analyze:bundle
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          .expo/
          
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: build-and-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Bundle size analysis
      run: |
        npm run analyze:bundle
        echo "Bundle analysis completed"
        
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: |
          performance/
          bundle-analysis/
          
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [coverage, security-audit, build-and-validate]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Expo CLI
      run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}
      
    - name: Expo login
      run: expo login --non-interactive
      env:
        EXPO_USERNAME: ${{ secrets.EXPO_USERNAME }}
        EXPO_PASSWORD: ${{ secrets.EXPO_PASSWORD }}
        
    - name: Publish preview
      run: expo publish --release-channel=pr-${{ github.event.number }}
      
    - name: Comment preview link
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Preview deployed! Try it out: https://exp.host/@your-username/socialz?release-channel=pr-${{ github.event.number }}`
          })
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [coverage, security-audit, e2e-tests, performance-monitoring]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Expo CLI
      run: npm install -g @expo/cli@${{ env.EXPO_CLI_VERSION }}
      
    - name: Expo login
      run: expo login --non-interactive
      env:
        EXPO_USERNAME: ${{ secrets.EXPO_USERNAME }}
        EXPO_PASSWORD: ${{ secrets.EXPO_PASSWORD }}
        
    - name: Build and submit to app stores
      run: |
        expo build:ios --type app-store
        expo build:android --type app-bundle
        
    - name: Submit to App Store
      if: success()
      run: expo upload:ios --latest
      
    - name: Submit to Google Play
      if: success()
      run: expo upload:android --latest
      
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
        
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#dev-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Notify on success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "ðŸŽ‰ SocialZ deployment successful!",
            channel: "#releases",
            username: "GitHub Actions"
          }
        webhook_url: ${{ secrets.SLACK_WEBHOOK }} 